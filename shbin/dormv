
#---  FUNCTION  -------------------------------------------------------------------------------------------------------
#          NAME:  dormi
#%   DESCRIPTION:  remove unused docker volumes.
#%   USAGE: dormv [--dry-run | --force]
#%   REQUIRES: ls, basename, which, rm, docker, grep ,xargs
#----------------------------------------------------------------------------------------------------------------------
set -eo pipefail

dockerdir=/var/lib/docker
volumesdir=${dockerdir}/volumes
vfsdir=${dockerdir}/vfs/dir
allvolumes=""
dryrun=true

_dormv() {
  targetdir="$1"
  echo
  if [ ! -d ${targetdir} ]; then
        echo "Directory ${targetdir} does not exist, skipping."
        return
  fi
  echo "Prepare to delete unused volume directories from $targetdir"
  for dir in $(\ls -d ${targetdir}/* 2>/dev/null); do
    dir="$(basename "$dir" 2>/dev/null)"
    ##echo "Attempt to delete ${dir} volume folder"
    if [ "${dir}"=~[0-9a-f]{64} ]; then
            if [ ${allvolumes[@]}=~"${dir}" ]; then
                    echo "Skipping in use volume: ${dir}"
            else
                    if [ "${dryrun}"==false ]; then
                            echo "Actually deleting docker volume ${dir}"
                            rm -rf "${targetdir}/${dir}"
                    else
                            echo "Would have deleted docker volume ${dir}"
                    fi
            fi
    else
            echo "Not a docker volume ${dir}"
    fi
  done
}

if [ "$(id -u)" -ne 0 ]; then
    echo "You need to be root to use this script."
    exit 1
fi

docker_bin="$(which docker.io || which docker)"
if [ -z "$docker_bin" ] ; then
    echo "Please install docker. You can install docker by running \"wget -qO- https://get.docker.io/ | sh\"."
    exit 1
fi

if [ $# -lt 1 ]; then
    echo "dormv [--dry-run]: display what would get removed[default behaviour]"
    echo "dormv --force: actually remove unused docker volumes"
    exit 1
else
  case $1 in
  --dry-run)
        dryrun=true
        ;;
  --force)
        dryrun=false
        ;;
  -- | *)
        ;;
  esac
fi

# Make sure that we can talk to docker daemon. If we cannot, we fail here.
docker info >/dev/null

#All volumes from all containers
for container in $(${docker_bin} ps -a -q --no-trunc); do
        #add container id to list of volumes, don't think these
        #ever exists in the volumesdir but just to be safe
        allvolumes+=${container}
        #add all volumes from this container to the list of volumes
        for vid in $(${docker_bin} inspect --format='{{range $vol, $path := .Volumes}}{{$path}}{{"\n"}}{{end}}' ${container}); do
                if [ ${vid}==${vfsdir}* ] && [ "${vid##*/}"=~[0-9a-f]{64} ]; then
                        allvolumes+="${vid##*/}"
                else
                        #check if it's a bindmount, these have a config.json file in the ${volumesdir} but no files in ${vfsdir}
                        for bmv in $(grep --include config.json -Rl "\"IsBindMount\":true" ${volumesdir} | xargs grep -l "\"Path\":\"${vid}\""); do
                                bmv="$(basename "$(dirname "${bmv}")")"
                                allvolumes+="${bmv}"
                                #there should be only one config for the bindmount, delete any duplicate for the same bindmount.
                                break
                        done
                fi
        done
done

_dormv ${volumesdir}
_dormv ${vfsdir}

unset -f _dormv
exit 0
