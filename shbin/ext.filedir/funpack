
#---  FUNCTION  -------------------------------------------------------------------------------------------------------
#          NAME:  funpack & fpack
#%   DESCRIPTION:  Quick uncompressing of archived packs
#%   USAGE: funpack [ -p | --path /target/path ] pack1.zip pack2.tar.gz pack3.tar ... packn.7z
#%   REQUIRES: abspath, psbpath, basename, dirname, mktemp, pushd, popd, tar, [unlzma], [bunzip2], [unrar], [gunzip], [unzip], [uncompress], [7z], [unxz], [ar], [rpm2cpio], [cabextract]
#----------------------------------------------------------------------------------------------------------------------
_funpack() {
  if [ $# -lt 1 ] ; then
     echo "Usage: funpack [ -p | --path /target/path ] testpack.zip anotherpack.tar.gz"
     return 0
  fi
  local targetpath=""
  case "$1" in
    -p | --path)
        shift
        local targetpath="$(psbpath "$1")"
        shift
    ;;
    -- | *)
        local targetpath="$(psbpath "$1")"
        shift
    ;;
  esac
  [ -z "${targetpath}" ] && targetpath="$(pwd)"
  if [ -e "${targetpath}" ] && [ -f "${targetpath}" ]; then
    echo "Opt1 Invalid: Target path should be a directory, NOT a file!" >&2
    exit 1
  elif [ ! -e "${targetpath}" ] && [ -d "$(dirname ${targetpath})" ]; then
    mkdir -p "${targetpath}" || echo "Opt1 Error: Target dir ${targetpath} can NOT be created!" && exit 1
  fi
  if [ $# -gt 1 ] ; then
     local display_divider=1
  else
     local display_divider=0
  fi
  local curarg=""
  local leftargs="$@"
  for curarg in ${leftargs}; do
    local current_pack="$(abspath "$curarg")"
    if [ -n "$current_pack" ] && [ -f "$current_pack" ]; then
        local unpackpath="${targetpath}"
    else
        echo "$current_pack is not a valid file path, skipping ..."
        continue
    fi

    if [ "${display_divider}" -gt 0 ]; then
      echo "----------------------------------------"
      echo "Unpacking ${current_pack} to ${unpackpath}:"
      echo "----------------------------------------"
    fi
    case $current_pack in
       *.tar.bz2 | *.tbz2)   tar -C "${unpackpath}" -xvjf "$current_pack" ;;
       *.tar.gz | *.tgz)    tar -C "${unpackpath}" -xvzf "$current_pack" ;;
       *.tar.xz | *.txz)    tar -C "${unpackpath}" -xvJf "$current_pack" ;;
       *.tar.7z | *.t7z)
            local tmpdir="$(mktemp -d)"
            local tmptar="$(echo $(basename ${current_pack}) | sed -e 's/\.tar\.7z//g;s/\.t7z//g').tar"
            pushd "${tmpdir}" >/dev/null && 7z x -y "$current_pack" 2>/dev/null && tar -C "${unpackpath}" -xvf "$tmptar" && popd >/dev/null
            rm -rf "${tmpdir}"
        ;;
       *.tar)       tar -C "${unpackpath}" -xvf "$current_pack"     ;;
       *.bz2)       bunzip2 -cd "$current_pack" > "${unpackpath}"   ;;
       *.gz)        gunzip -rc "$current_pack" > "${unpackpath}";;
       *.xz)        unxz -cd "$current_pack" > "${unpackpath}"  ;;
       *.7z)        pushd "${unpackpath}" >/dev/null && 7z x -y "$current_pack" 2>/dev/null && popd >/dev/null;;
       *.rar)       unrar x -y "$current_pack" "${unpackpath}"    ;;
       *.zip)       unzip "$current_pack" -d "${unpackpath}"   ;;
       *.Z)         uncompress -rc "$current_pack" > "${unpackpath}"  ;;
       *.lzma)      unlzma -cd "$current_pack" > "${unpackpath}"    ;;
       *.deb)       ar p "$current_pack" data.tar.gz | tar -C "${unpackpath}" xvzf -   ;;
       *.rpm)       rpm2cpio "$current_pack" | cpio -vi -d "${unpackpath}"  ;;
       *.exe)       cabextract "$current_pack" -d "${unpackpath}"  ;;
       *) echo "Format unsupported. Unable to extract $current_pack...";;
    esac
    (( curopt = curopt + 1 ))
  done
}


if [ $# -lt 1 ]; then
    echo "Usage: funpack [ -p | --path /target/path ] pack1.zip pack2.tar.gz pack3.tar ... packn.7z" >&2
else
    _funpack "$@"
fi

unset -f _funpack
exit 0
