#!/bin/sh

# A script that checks if commands are installed and if not attempts to
# install them with a package manager or a script.

SCRIPT_FILE="bstrap"
COMMANDS_FILE="wsl2.cfg"
COMMANDS_PACKAGE_MAP_FILE="cmds_pkg_map.cfg"

print_usage() {
  echo "Usage: . ./$SCRIPT_FILE [-f cmds.cfg [cmds_pkg_map.cfg]] "
  echo "Options:"
  echo "  -f cmds_file cmds_pkg_map_file  Install commands from file (default: $COMMANDS_FILE)"
}

# Check for command line arguments
if [ $# -gt 0 ]; then
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    print_usage
    exit 0
  fi
  # Check what commands configuration file to use
  if [ "$1" = "-f" ]; then
    if [ "$#" -lt 2 ]; then
      echo "Error: Missing argument for -f option."
      exit 1
    fi
    if [ ! -f "$2" ]; then
      echo "Commands configuration file does not exist: $2"
      exit 1
    else
      COMMANDS_FILE="$2"
    fi
    if [ -f "$3" ]; then
      COMMANDS_PACKAGE_MAP_FILE="$3"
    fi
  fi
fi

# Function to detect available package manager(s)
detect_package_managers() {
  available_package_managers=""
  managers="apt snap yum dnf pacman brew"
  for manager in $managers; do
    if command -v "$manager" >/dev/null 2>&1; then
      # Extra check for apt (because some other bogus apt shows up sometimes on macOS)
      if [ "$manager" = "apt" ] && [ ! -f "/etc/apt/sources.list" ]; then
        continue
      fi
      available_package_managers="$available_package_managers $manager"
    fi
  done
  if [ -z "$available_package_managers" ]; then
    echo "No supported package manager found."
  fi
}

# Helper function to remove leading and trailing whitespace
# This function is POSIX-compliant
trim_whitespace() {
  echo "$1" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
}

# Helper function to remove comments from lines
trim_comment() {
  echo "$1" | sed 's/[[:space:]]*#.*//'
}

# Function: read_config
# Description: Reads a configuration file and populates shell variables
# with the parsed data.
# Parameters:
#   $1 - The name of the configuration file to read.
#   $2 - The name of the configuration.
# Usage: read_config <file_name> <config_array>
# Example:
#   read_config "config.cfg" "my_config"
read_config() {
  file_name="$1"
  config_name="$2"

  current_section=""
  # Store all encountered sections in a variable
  eval config_name_sections="${config_name}_sections"
  
  while IFS= read -r line; do
    # Remove comments and whitespace
    line=$(trim_comment "$line")
    line=$(trim_whitespace "$line")

    # Skip empty lines
    [ -z "$line" ] && continue

    case "$line" in
      \[*\])
        current_section=$(echo "$line" | sed 's/^\[\(.*\)\]$/\1/')
        eval "${config_name_sections}=\"\${${config_name_sections}} $current_section\""
        ;;
      *=*)

        # Split the line into key and value
        key=$(echo "$line" | cut -d= -f1)
        value=$(echo "$line" | cut -d= -f2-)
        key=$(trim_whitespace "$key")
        value=$(trim_whitespace "$value")

        escaped_section=$(echo "$current_section" | sed 's/[^a-zA-Z0-9_]/_/g')

        # Store the key-value in a shell variable
        eval "${config_name}_${escaped_section}_${key}=\"$value\""
        ;;
    esac
  done < "$file_name"
}

# Function: get_section_value
# Description: Retrieves a value from the parsed configuration data.
# Parameters:
#   $1 - The name of the configuration.
#   $2 - The section name.
#   $3 - The key name.
#   $4 - The default value to return if the key is not found.
# Usage: get_section_value <config_array> <section> <key> <default_value>
# Example:
#   value=$(get_section_value my_config "section" "key" "default
get_section_value() {
  config_name="$1"
  section="$2"
  # Escape section name to avoid issues with special characters
  section=$(echo "$section" | sed 's/[^a-zA-Z0-9_]/_/g')
  key="$3"
  default_value="$4"
  eval "value=\$${config_name}_${section}_${key}"
  if [ -z "$value" ]; then
    echo "$default_value"
  else
    echo "$value"
  fi
}

command_is_installed() {
  command_name=$1
  EXISTS=1
  # Check if the command exists with dpkg and make sure it's not listed as just deinstalled
  if dpkg -s $(get_section_value commands_package_map "$command_name" "apt" "$command_name") >/dev/null 2>&1 && \
     ! dpkg -s $(get_section_value commands_package_map $command_name "apt" $command_name) | grep -q "deinstall"; then
    EXISTS=0
  elif snap list $(get_section_value commands_package_map "$command_name" "snap" "$command_name") >/dev/null 2>&1; then
    EXISTS=0
  elif brew list $(get_section_value commands_package_map "$command_name" "brew" "$command_name") >/dev/null 2>&1; then
    EXISTS=0
  elif command -v "$command_name" >/dev/null 2>&1; then
    EXISTS=0
  elif [ "script" = $(get_section_value commands "$command_name" "installer" "") ]; then
    # Commands installed with a script can have a check script to verify the installation
    check_script="bstrap_scripts/check-$command_name.sh"
    if [ -f "$check_script" ]; then
      ./"$check_script"
      if [ $? -eq 0 ]; then
        EXISTS=0
      fi
    fi
  # elif [ -f "/usr/local/bin/$1" ]; then
  #     EXISTS=0
  # elif [ -f "/usr/bin/$1" ]; then
  #     EXISTS=0
  # elif [ -f "/bin/$1" ]; then
  #     EXISTS=0
  # elif [ -f "/snap/bin/$1" ]; then
  #     EXISTS=0
  fi
  return "$EXISTS"
}

install_command_with_installer() {
  command_name=$1
  installer=$2

  # Check if the command name is different for this particular installer
  alternate_command_name=$(get_section_value commands_package_map "$command_name" "$installer" "")
  if [ -n "$alternate_command_name" ]; then
    echo "Using alternate command name: $alternate_command_name"
    command_name=$alternate_command_name
  fi

  if [ "$installer" = "apt" ]; then
    sudo apt install "$command_name" || return 1
  elif [ "$installer" = "snap" ]; then
    snap install --classic "$command_name" || snap install "$command_name" || return 1
  elif [ "$installer" = "dnf" ]; then
    sudo dnf install "$command_name" || return 1
  elif [ "$installer" = "yum" ]; then
    sudo yum install "$command_name" || return 1
  elif [ "$installer" = "pacman" ]; then
    sudo pacman -S "$command_name" || return 1
  elif [ "$installer" = "brew" ]; then
    brew install "$command_name" --no-quarantine || brew install --cask --no-quarantine "$command_name" || return 1
  elif [ "$installer" = "script" ]; then
    install_script="bstrap_scripts/install-$command_name.sh"
    if [ -f "$install_script" ]; then
      ./"$install_script" && return 0
    else
      echo "Missing install script: $install_script"
      return 1
    fi
  fi
}

install_command() {
  command="$1"
  if command_is_installed "$command"; then
    return
  fi

  # First install dependencies
  dependencies=$(get_section_value "commands" "$command" "dependencies" "")
  if [ -n "$dependencies" ]; then
    echo "Installing dependencies for $command"
    for dependency in $dependencies; do
      install_command "$dependency"
    done
  fi

  # Check if the command has a specific installer
  # If not, try to install with the available package managers
  installer=$(get_section_value "commands" "$command" "installer")

  if [ -z "$installer" ]; then
    for manager in $available_package_managers; do
      echo "Trying to install $command with $manager"
      if install_command_with_installer "$command" "$manager"; then
        return
      fi
    done
  fi

  # Try the specific installer if one exists
  if install_command_with_installer "$command" "$installer"; then
    return
  fi

  echo "Failed to install $command with the available install options"
}

install_commands() {
  commands=$commands_sections
  for command in ${commands}; do
    if ! command_is_installed "$command"; then
      printf "\033[31m%s\033[0m is not installed, " "$command"
      
      # Ask the user if they want to install the command
      printf "do you want to? [y/n] "
      read answer

      if [ "$answer" != "y" ]; then
        continue
      fi
      
      install_command "$command"
    else
      printf "\033[32m%s\033[0m is already installed\n" "$command"
    fi
  done
}

detect_package_managers

read_config "$COMMANDS_FILE" commands
read_config "$COMMANDS_PACKAGE_MAP_FILE" commands_package_map

install_commands
