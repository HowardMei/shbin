
#---  FUNCTION  -------------------------------------------------------------------------------------------------------
#          NAME:  ejson
#%   DESCRIPTION:  Parse and extract key value pairs from json string/file.
#%   USAGE: echo "json_string" | ejson [-k|-v|--keys|--values]  OR  ejson [-k|-v|--keys|--values] jsonfile
#%   REQUIRES: jqx6464, uniq, sed, ecalc, ncols, efilters, ecol
#----------------------------------------------------------------------------------------------------------------------

_ejson() {
if [ $# -eq 1 ]; then
    if [ -f "$1" ]; then
        cat "$1" | jqx64
    else
        case "$1" in
            -l | --len | --length)
            shift
            local length=$(echo "$(cat)" | jqx64 -c ".|length")
            if [ -z "$length" ]; then
                echo 0
            else
                echo "$length"
            fi
            ;;
            -k | --key | --keys)
            shift
            echo "$(cat)" | jqx64 -c "[paths|.[0:9]]" | sed -e "s/\],\[/\n/g;s/,/./g;s/\[//g;s/\]//g;s/[\'\"]//g;/^\s*$/d" | uniq
            ;;
            -k[0-9] | --key[0-9] | --keys[0-9] | -k[0-9]:[0-9] | --key[0-9]:[0-9] | --keys[0-9]:[0-9])
            local nca=0
            local ncb=9
            local ncc=2
            if echo "$1" | grep -q : 2>/dev/null; then
                nca="$(echo "$1" | cut -d: -f1 | tr -cd '[:digit:]')"
                ncb="$(echo "$1" | cut -d: -f2 | tr -cd '[:digit:]')"
                ncc="$(ecalc "$ncb-$nca")"
            else
                nca="$(echo "$1" | tr -cd '[:digit:]')"
                ncb="$(ecalc "$nca+1")"
            fi
            shift
            echo "$(cat)" | jqx64 -c "[paths|.[$nca:$ncb]]" | sed -e "s/\],\[/\n/g;s/,/./g;s/\[//g;s/\]//g;s/[\'\"]//g;/^\s*$/d" | uniq
            ;;
            -v | --value | --values)
            echo "$(cat)" | jqx64
            ;;
            -- | *)
            echo "$(cat)" | jqx64 -r ."$1"
            ;;
        esac
    fi
elif [ $# -eq 2 ]; then
    if [ -f "$2" ]; then
        cat "$2" | _ejson "$1"
    else
        case "$1" in
            -k | --key | --keys)
                shift
                local key="$1"
                shift
                local args="$(cat)"
                local depth=$(echo "$key" | efilters -m '.' | grep -c '.')
                local depmax=$(ecalc "$depth+2")
                echo "$args" | _ejson -k"0:${depmax}" | sed -e "/^${key}$\|^${key}\./!d"
            ;;
            -sk | --subkey | --subkeys)
                shift
                local key="$1"
                shift
                echo "$(cat)" | _ejson -k "$key" | sed -e "/^${key}$/d;s/^${key}\.//g"
            ;;
            -v | --value | --values)
                shift
                echo "$(cat)" | jqx64 -r ."$1" | sed -e "s/\[\]//g;/^\s*$/d"
            ;;
            -f | --flat | --flatten)
                shift
                local key="$1"
                shift
                local args="$(cat)"
                local depth=$(echo "$key" | ncols -d '.')
                local keyname=$(echo "$key" | ecol -d '.' "$depth")
                local keys="$(echo "$args" | _ejson -k "$key")"
                local keystrs="$(echo "$args" | _ejson -sk "$key")"
                if [ -z "$keys" ] && [ -z "$keystrs" ]; then
                    return 1
                elif [ -n "$keys" ] && [ -z "$keystrs" ]; then
                    local value="$(echo "$args" | jqx64 -r ".${key}" | sed -e "s/\[\]//g;/^\s*$/d")"
                    echo "${keyname}${value}"
                else
                    for keystr in $keystrs; do
                        local subkeys="$(echo "$args" | _ejson -k "${key}.${keystr}")"
                        local subkeystrs="$(echo "$args" | _ejson -sk "${key}.${keystr}")"
                        if [ -n "$subkeys" ] && [ -z "$subkeystrs" ]; then
                            local value="$(echo "$args" | jqx64 -r ".${subkeys}" | sed -e "s/\[\]//g;/^\s*$/d")"
                            echo "${subkeys} ${value}" | sed -e "s/^${key}\.//g"
                        fi
                    done
                fi
            ;;
            -- | *)
                jqx64 "$@"
            ;;
        esac
    fi
fi
}


if [ $# -lt 1 ]; then
    echo "$(cat)" | jqx64
else
    opts="$@"
    fopt="$(ecol "$#" "$opts")"
    shift
    newopts="$(ecol :"$#" "$opts")"
    if [ -f "$fopt" ]; then
        cat "$fopt" | _ejson $newopts
    else
        echo "$(cat)" | _ejson $opts
    fi
fi

unset fopt opts newopts
exit 0
