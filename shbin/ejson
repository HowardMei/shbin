
#---  FUNCTION  -------------------------------------------------------------------------------------------------------
#          NAME:  ejson
#%   DESCRIPTION:  Parse and extract key value pairs from json string/file.
#%	 Usage: echo "json_string" | ejson [-k|-v|--keys|--values]  OR  ejson [-k|-v|--keys|--values] jsonfile
#----------------------------------------------------------------------------------------------------------------------

if [ $# -lt 1 ]; then
	echo "$(cat)" | jqx
elif [ $# -eq 1 ]; then
	if [ -f "$1" ]; then
		cat "$1" | jqx
	elif [ "$1" == "-k" ] || [ "$1" == "--keys" ];then
		echo "$(cat)" | jqx -c '[paths|.[0:5]]|unique[]' | estrips -q | estrips -m '[' | estrips -m ']' | sed 's/,/./g'
	elif [ "$1" == "-v" ] || [ "$1" == "--values" ];then
		echo "$(cat)" | jqx
	else
		echo "$(cat)" | jqx -r ."$1"
	fi
elif [ $# -eq 2 ]; then
	if [ -f "$2" ]; then
		cat "$2" | ejson "$1"
	elif [ "$1" == "-k" ] || [ "$1" == "--keys" ];then
		shift
		echo "$(cat)" | jqx -c '[paths|.[0:5]]|unique[]' | estrips -q | estrips -m '[' | estrips -m ']' | sed 's/,/./g' | efilter -rl "$1"
	elif [ "$1" == "-v" ] || [ "$1" == "--values" ];then
		shift
		echo "$(cat)" | jqx -r ."$1"
	else
		jqx "$@"
	fi
else
	opts="$@"
	fopt="$(ecol "$#" "$opts")"
	shift
	newopts="$(ecol :"$#" "$opts")"
	if [ -f "$fopt" ]; then
		cat "$fopt" | ejson $newopts 
	else
		echo "$(cat)" | ejson $opts 
	fi
fi

unset fopt opts newopts
exit 0
